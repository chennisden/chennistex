\ProvidesPackage{solprint}

% new read and write
% creates temporary solout because we only want to overwrite solout
% at the end of the document

\newwrite\@solout
\openout\@solout = \jobname.sol

% boolean for whether the file is the source file or a separate solutions document

\newif\ifsource\sourcetrue

% counter for sol files
\newcounter{solfiles}
\setcounter{solfiles}{0}

% - Options
%   Used to change the default environment name in case of conflicts

\RequirePackage{kvoptions}

\DeclareStringOption[solu]{envname}
\DeclareBoolOption[false]{showsol}

\ProcessKeyvalOptions*

\RequirePackage{fancyvrb} % provides the VerbatimOut environment
\RequirePackage{fvextra} % patches fancyverb

% Initialize solprint@title
% Set up mechanism to reset soltitle
% titledefined checks whether title is defined
% 0 means undefined, 1 means definde
% Used to throw errors

\def\resetsoltitle{
    \let\solprint@envtitle\relax
    \gdef\titledefined{0}
    }
\resetsoltitle % Users are expected to put this in the appropriate
% location in their own classes or packages
% in order to correctly provide error reporting. 

\newcommand\soltitle[2][Solution to]
{% we add comments after lines
    \gdef\titledefined{1}% so extraneous spaces
    \gdef\solprint@envtitle{#1 #2}{#2\ignorespaces}% are not added
}

% define env based on envname passed in
\newenvironment{\solprint@envname}
{
    \stepcounter{solfiles}
    \immediate\write\@solout{%
        \string\expandafter\string\xdef\noexpand\csname solprint@title\thesolfiles\string\endcsname{\solprint@envtitle}
    }

    \ifnum\titledefined=0
        % Throw an error if \solprint@envtitle is undefined
        % This is done for user convenience
        \PackageError{solprint}{The environment ``\solprint@envname'' must be in an environment that handles solutions}{Developers should see \protect\soltitle and \protect\resetsoltitle in the package documentation.}
    \fi
    \VerbatimOut{\jobname-\thesolfiles.sol}% need % here because VerbatimOut behaves weirdly with spaces
}
{
    \endVerbatimOut
}

% Define titles for solprint as to make it easier to customize

\newcommand{\solprint@title}{\section{Solutions}}
\newcommand{\solprint@subtitle}[1]{\subsection{#1}}

% Includes all sol files in order

\ifsolprint@showsol
\newcommand\solprint[1][\jobname]{

    % defines the file to look for solutions to be the optional argument

    \immediate\write\@auxout{\string\gdef\string\sol@prefix{#1}}

    \ifdefined\sol@count
        \solprint@title % prints solution title
        \foreach \i in {1, ..., \sol@count} {
            \def\temp@title{\csname solprint@title\i\endcsname}
            \edef\sol@filename{#1-\i.sol}% Comments are needed
            \IfFileExists{\sol@filename}{% To eliminate any spaces
                % That follow the ends of the lines
                \solprint@subtitle{\temp@title}
                \input{\sol@filename}
            }{}
        }
    \fi

    \ifnum\pdfstrcmp{#1}{\jobname}=0
    \else
        \sourcefalse
    \fi
}
\else
\newcommand\solprint[1]{}
\fi

% inputs solout at beginning of document if it exists (requires running twice)

\AtBeginDocument{
    \ifdefined\sol@prefix
        \IfFileExists{\sol@prefix.sol}
        {
            % because we are hooking into the beginning of the document,
            % we are making @ a letter and making @ an other
            \makeatletter
            \input{\sol@prefix.sol}
            \makeatother
        }
        {
            \PackageWarning{solprint}{Make sure the .sol file you passed into \protect\solprint exists.}
        }
    \fi
}

% Writes to @solout at end of document

\AtEndDocument{
    \ifsource
    \immediate\write\@solout{% we comment to prevent latex from inserting spaces after linebreaks
    \string\gdef\string\sol@count{\thesolfiles} % and we use \string to tell latex to read the next control sequence literally
    }

    % close @solout
    \closeout\@solout
    \fi
}